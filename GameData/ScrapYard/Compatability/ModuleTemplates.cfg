SY_MODULE_TEMPLATE
{
  name = TweakScale //Regex compatible, could have been Tweak\Dca.* or something stupid like that
  requirement = if([currentScale] != [defaultScale] ? true : false)//Uses square brackets for other fields
}

SY_MODULE_TEMPLATE
{
  name = .*rocedural.* //Procedural parts
}

SY_MODULE_TEMPLATE
{
  name = [p,P]roc[^e].*|.+[p,P]roc$ //matches Proc* or *Proc but not Processor
}

SY_MODULE_TEMPLATE 
{
  name = .* //for all modules, store the module if Upgrades have been applied
  requirement = if([UPGRADESAPPLIED.COUNT] > 0 ? true : false) //require a non-empty UPGRADESAPPLIED node
  storeIfDefault = true //says to store the module even if it is equal to the default module
}
//COUNT, NODECOUNT, and FIELDCOUNT are special logical fields that give the corresponding counts


//Forbidden templates are used to define modules that shouldn't be stored in the inventory
//If a part has any forbidden modules, it isn't stored
//This isn't really fleshed out yet
//SY_FORBIDDEN_TEMPLATE
//{
//  name = KerbalEVA //don't allow EVA kerbals to be added to the inventory
//}